import { generateDateInPast } from '@utils/date-generators'
import { Issue } from '@utils/types'
import { v4 as uuidv4 } from 'uuid'

export const issues: Issue[] = [
  {
    id: uuidv4(),
    title: 'Implement Notification System',
    description:
      'Build a notification system that keeps users updated about important events in their projects and issues. This should help users stay on top of changes like new comments, status updates, assignments, and deadlines.',
    status: 'todo',
    priority: 'high',
    tag: 'development',
    createdAt: generateDateInPast(3),
    content:
      "<h1>Implement Notification System</h1><p></p><h2>Goal</h2><p>Build a notification system that keeps users updated about important events in their projects and issues. This should help users stay on top of changes like new comments, status updates, assignments, and deadlines.</p><p></p><h2>Key Points</h2><ul><li><p>We'll need different types of notifications — like when someone comments on an issue, changes its status, or assigns it to someone.</p></li><li><p>Notifications should show up inside the app (like a notification bell or center), and maybe later we can add email or push notifications for the really important stuff.</p></li><li><p>Users should be able to control what notifications they get and how — for example, turning off emails or muting certain projects.</p></li><li><p>Since we have offline mode, notifications created while offline should be queued and shown when the user comes back online. Also, users should see which notifications they haven’t read yet.</p></li><li><p>The system needs to work smoothly even as more users and projects grow, without slowing down the app.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Use WebSockets or Server-Sent Events to push notifications in real-time.</p></li><li><p>Create a notification center UI with unread counts and filters so users can easily find what’s new.</p></li><li><p>Store notifications locally so users can still see them offline.</p></li><li><p>Hook this up with backend APIs to get notifications, mark them read/unread, and update preferences.</p></li><li><p>Add a settings page so users can customize their notification preferences.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Look into best practices and maybe some open-source tools for notifications.</p></li><li><p>Sketch out how the notification UI and settings might look.</p></li><li><p>Build a simple prototype to test real-time delivery.</p></li><li><p>Make sure offline notifications queue up and sync properly.</p></li><li><p>Get some user feedback and improve the system based on that.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Check this works well on all browsers we support.</p></li><li><p>Work closely with the backend team to design the notification API.</p></li><li><p>Keep privacy and security in mind when dealing with notification data.</p></li></ul>",
  },
  {
    id: uuidv4(),
    title: 'Create and Report Issues',
    description:
      'Make it easy and intuitive for users to create new issues and report problems within their projects. This should help teams track bugs, tasks, and feature requests efficiently.',
    status: 'todo',
    priority: 'high',
    tag: 'development',
    createdAt: generateDateInPast(3),
    content:
      '<h1>Create and Report Issues</h1><p></p><h2>Goal</h2><p>Make it easy and intuitive for users to create new issues and report problems within their projects. This should help teams track bugs, tasks, and feature requests efficiently.</p><p></p><h2>Key Points</h2><ul><li><p>The issue creation form should be simple but flexible — allow users to add titles, descriptions, assign to team members, set priorities, and attach files if needed.</p></li><li><p>Support rich text or markdown in the description so users can provide detailed info.</p></li><li><p>Users should be able to quickly report issues from different parts of the app (e.g., from the dashboard or project page).</p></li><li><p>Validate inputs to prevent incomplete or incorrect data.</p></li><li><p>Provide helpful feedback and confirmations once an issue is created.</p></li><li><p>Consider offline support so users can draft issues and submit them once back online.</p></li><li><p>Make sure the UI works smoothly on all devices and browsers.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Build a reusable issue creation component with form validation and markdown support.</p></li><li><p>Integrate file upload functionality for attachments.</p></li><li><p>Add quick access buttons or shortcuts to open the issue creation form from various pages.</p></li><li><p>Save drafts locally to avoid losing user input if they navigate away or go offline.</p></li><li><p>Connect with backend APIs to create and store issues reliably.</p></li><li><p>Show success messages and clear the form after submission.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Research best UI/UX patterns for issue reporting forms.</p></li><li><p>Design mockups and get feedback from users or stakeholders.</p></li><li><p>Develop the issue creation form with validation and markdown editor.</p></li><li><p>Test offline draft saving and syncing on reconnect.</p></li><li><p>Collect user feedback and iterate on the workflow.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Ensure compatibility with all supported browsers.</p></li><li><p>Coordinate with backend team to finalize API specs.</p></li><li><p>Keep accessibility in mind for all users.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Update Status',
    description:
      "Allow users to easily update the status of issues to reflect their current progress. This helps keep everyone on the team informed about what's done, in progress, or blocked.",
    status: 'todo',
    priority: 'medium',
    tag: 'design',
    createdAt: generateDateInPast(3),
    content:
      "<h1>Update Status</h1><p></p><h2>Goal</h2><p>Allow users to easily update the status of issues to reflect their current progress. This helps keep everyone on the team informed about what's done, in progress, or blocked.</p><p></p><h2>Key Points</h2><ul><li><p>Users should be able to change issue status quickly from the issue page or issue list.</p></li><li><p>Support common status options like “Open,” “In Progress,” “Resolved,” “Closed,” and allow customization if needed.</p></li><li><p>Show clear visual indicators of the current status on issue cards and detail views.</p></li><li><p>Notify relevant team members when status changes occur (consider integration with the notification system).</p></li><li><p>Handle offline status updates by queuing changes and syncing when back online.</p></li><li><p>Ensure status updates trigger any necessary backend workflows or automations.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Add a status dropdown or toggle on the issue detail page and issue lists.</p></li><li><p>Update the UI instantly when a status changes, with loading indicators for backend sync.</p></li><li><p>Store status changes locally if offline, then sync automatically when online.</p></li><li><p>Connect with backend APIs to update issue status and trigger notifications.</p></li><li><p>Provide audit logs or history so users can see past status changes.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Define the list of default statuses and allow for future customization.</p></li><li><p>Design UI elements for status updates and indicators.</p></li><li><p>Implement frontend components with offline support.</p></li><li><p>Test syncing behavior and notification triggers.</p></li><li><p>Gather user feedback and improve the experience.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Verify compatibility across supported browsers and devices.</p></li><li><p>Consider accessibility for status controls.</p></li><li><p>Align with notification system for status change alerts.</p></li></ul>",
  },
  {
    id: uuidv4(),
    title: 'Add Comments',
    description:
      'Enable users to add comments to issues to facilitate communication and collaboration within the team. Comments should be easy to write, view, and manage.',
    status: 'todo',
    priority: 'medium',
    tag: 'design',
    createdAt: generateDateInPast(4),
    content:
      '<h1>Add Comments</h1><p></p><h2>Goal</h2><p>Enable users to add comments to issues to facilitate communication and collaboration within the team. Comments should be easy to write, view, and manage.</p><p></p><h2>Key Points</h2><ul><li><p>Users should be able to add, edit, and delete their own comments.</p></li><li><p>Support rich text or markdown formatting to allow detailed and clear communication.</p></li><li><p>Display comments in chronological order with timestamps and author information.</p></li><li><p>Notify relevant users when new comments are added (integrate with the notification system).</p></li><li><p>Support offline comment drafting and syncing once back online.</p></li><li><p>Ensure the comment section loads efficiently, even with many comments.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Build a comment input box with markdown support and basic formatting tools.</p></li><li><p>Show a list of comments below the issue description, with clear separation and user info.</p></li><li><p>Implement edit and delete options for users’ own comments.</p></li><li><p>Store comments locally when offline and sync automatically when online.</p></li><li><p>Connect with backend APIs to fetch, create, update, and delete comments.</p></li><li><p>Add notifications or badges to alert users of new comments.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Research best practices for comment systems in project management tools.</p></li><li><p>Design the comment UI and interaction flows.</p></li><li><p>Develop the comment input and display components.</p></li><li><p>Test offline comment creation and syncing.</p></li><li><p>Collect feedback from users and iterate on the experience.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Ensure compatibility across all supported browsers and devices.</p></li><li><p>Coordinate with backend for API support and notification integration.</p></li><li><p>Keep accessibility in mind for all comment features.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Set Priorities',
    description:
      'Allow users to assign and update priority levels on issues so teams can focus on the most important tasks first.',
    status: 'todo',
    priority: 'medium',
    tag: 'design',
    createdAt: generateDateInPast(4),
    content:
      '<h1>Set Priorities</h1><p></p><h2>Goal</h2><p>Allow users to assign and update priority levels on issues so teams can focus on the most important tasks first.</p><p></p><h2>Key Points</h2><ul><li><p>Provide a clear set of priority levels (e.g., Low, Medium, High) that users can select from.</p></li><li><p>Make it easy to change priority both when creating an issue and when updating an existing one.</p></li><li><p>Display priority visually on issue lists and detail pages, using colors or icons for quick recognition.</p></li><li><p>Consider how priority changes affect notifications or workflows.</p></li><li><p>Support offline priority updates that sync when the user is back online.</p></li><li><p>Ensure priority settings are consistent across the app and easy to understand.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Add a priority selector dropdown or buttons on issue creation and edit forms.</p></li><li><p>Show priority badges or colored labels on issue cards and details.</p></li><li><p>Save priority changes locally if offline, then sync with backend when online.</p></li><li><p>Connect with backend APIs to update and retrieve priority data.</p></li><li><p>Optionally, allow users to filter or sort issues by priority.</p></li></ul><h2></h2><h2>Next Steps</h2><ul><li><p>Define the priority levels and their meanings.</p></li><li><p>Design UI components for selecting and displaying priority.</p></li><li><p>Implement frontend support with offline syncing.</p></li><li><p>Coordinate with backend team on API support and any related workflows.</p></li><li><p>Test priority updates and their impact on notifications and filters.</p></li><li><p>Gather user feedback and refine the feature.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Verify cross-browser compatibility.</p></li><li><p>Keep accessibility in mind for priority controls and indicators.</p></li><li><p>Align with other issue attributes like status and due dates.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Filter and Sort Issues',
    description:
      'Provide users with powerful and flexible tools to filter and sort issues so they can quickly find what matters most and organize their work effectively.',
    status: 'todo',
    priority: 'low',
    tag: 'testing',
    createdAt: generateDateInPast(4),
    content:
      '<h1>Filter and Sort Issues</h1><p></p><h2>Goal</h2><p>Provide users with powerful and flexible tools to filter and sort issues so they can quickly find what matters most and organize their work effectively.</p><p></p><h2>Key Points</h2><ul><li><p>Filters should allow narrowing down issues by key attributes such as assignee, status, priority, labels, due dates, and more.</p></li><li><p>Support combining multiple filters with logical AND and OR conditions to refine results precisely.</p></li><li><p>Sorting options should include common fields like creation date, update date, priority, and alphabetical order.</p></li><li><p>Filters and sorting preferences should be easy to apply, clear, and modifiable at any time.</p></li><li><p>Users should be able to save custom filter and sort views for quick access later.</p></li><li><p>Filtering and sorting should persist across navigation within the app to avoid losing context.</p></li><li><p>The UI should provide clear indicators of active filters and sorting criteria.</p></li><li><p>Consider responsiveness and usability on different screen sizes, with options to toggle filter visibility to reduce clutter.</p></li><li><p>Avoid applying default filters or sorting that users did not explicitly set, to prevent confusion.</p></li><li><p>Support keyboard shortcuts and quick actions to speed up filtering and sorting tasks.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Implement a filter panel with dropdowns or multi-select controls for each filterable field.</p></li><li><p>Add a sorting dropdown aligned with filters, allowing users to pick ascending or descending order.</p></li><li><p>Show badges or labels summarizing active filters with options to remove them individually.</p></li><li><p>Allow users to save and switch between multiple filter and sort presets.</p></li><li><p>Persist filter and sort state in the URL or user preferences for continuity.</p></li><li><p>Optimize performance to handle large issue lists without lag.</p></li><li><p>Design for accessibility and keyboard navigation.</p></li><li><p>On smaller screens, provide a toggle button to show/hide filters and sorting controls.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Research best practices and popular patterns for filtering and sorting in issue trackers and project management tools.</p></li><li><p>Design UI mockups for the filter and sort components, including mobile views.</p></li><li><p>Develop frontend components with state management for filters and sorting.</p></li><li><p>Integrate with backend APIs to support filtering and sorting queries efficiently.</p></li><li><p>Collect feedback and iterate on the design and functionality.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Ensure compatibility across all supported browsers and devices.</p></li><li><p>Coordinate with backend team to define API support for complex filtering and sorting.</p></li><li><p>Keep user experience consistent and intuitive, avoiding surprises like unexpected default filters.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Integrate with Other Tools',
    description:
      'Enable seamless integration of our issue tracking platform with other popular tools and services that teams rely on, such as CRM systems, email clients, chat platforms, and project management apps. This will streamline workflows, reduce context switching, and improve overall productivity.',
    status: 'in-progress',
    priority: 'high',
    tag: 'development',
    createdAt: generateDateInPast(4),
    content:
      '<h1>Integrate with Other Tools</h1><p></p><h2>Goal</h2><p>Enable seamless integration of our issue tracking platform with other popular tools and services that teams rely on, such as CRM systems, email clients, chat platforms, and project management apps. This will streamline workflows, reduce context switching, and improve overall productivity.</p><p></p><h2>Key Points</h2><ul><li><p>Integrations should allow automatic syncing of issues, comments, status updates, and notifications across connected tools.</p></li><li><p>Support popular platforms like GitHub, Slack, email services, CRM systems, and calendar apps.</p></li><li><p>Provide easy setup and configuration for users, ideally with no-code or low-code options.</p></li><li><p>Ensure data consistency and handle conflicts gracefully when syncing between systems.</p></li><li><p>Allow customization of integration triggers and actions to fit different team workflows.</p></li><li><p>Maintain security and privacy standards when exchanging data with third-party services.</p></li><li><p>Consider offline scenarios where changes made offline sync properly once back online.</p></li><li><p>Provide clear documentation and support for integrations.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Use APIs and webhooks to connect with external services for real-time data exchange.</p></li><li><p>Build an integration management UI where users can enable, configure, and monitor integrations.</p></li><li><p>Leverage existing workflow automation platforms (e.g., Make.com) to simplify building and maintaining integrations.</p></li><li><p>Support importing/exporting issues and comments via common formats like Markdown to enhance compatibility.</p></li><li><p>Implement background jobs to handle syncing and error recovery.</p></li><li><p>Provide logs or dashboards to track integration status and troubleshoot issues.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Identify the most valuable tools and platforms to integrate with based on user needs and market research.</p></li><li><p>Design the integration setup experience and user interface.</p></li><li><p>Develop core integration connectors and test with key platforms like GitHub and Slack.</p></li><li><p>Pilot integrations with select users and gather feedback.</p></li><li><p>Expand integration options and improve automation capabilities.</p></li><li><p>Document integration features and provide user guides.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Ensure all integrations comply with security best practices and data privacy regulations.</p></li><li><p>Coordinate closely with backend and security teams to design robust APIs and authentication flows.</p></li><li><p>Monitor integration performance and user satisfaction continuously.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Use Tags',
    description:
      'Allow users to add and manage tags on issues to help categorize, organize, and quickly find related tasks across projects.',
    status: 'in-progress',
    priority: 'medium',
    tag: 'design',
    createdAt: generateDateInPast(4),
    content:
      '<h1>Use Tags</h1><p></p><h2>Goal</h2><p>Allow users to add and manage tags on issues to help categorize, organize, and quickly find related tasks across projects.</p><p></p><h2>Key Points</h2><ul><li><p>Users should be able to create new tags on the fly and assign multiple tags to a single issue.</p></li><li><p>Provide a list of existing tags to choose from to maintain consistency and avoid duplicates.</p></li><li><p>Tags should be visible on issue cards and detail pages for easy identification.</p></li><li><p>Support filtering and searching issues by tags.</p></li><li><p>Allow users to edit or delete tags, with proper handling of tags already in use.</p></li><li><p>Consider color-coding tags to improve visual scanning.</p></li><li><p>Ensure tags sync correctly when users are offline and come back online.</p></li><li><p>Keep the tagging interface simple and intuitive to avoid clutter.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Add a tag input component with autocomplete suggestions based on existing tags.</p></li><li><p>Display tags as clickable badges on issues that can be removed or edited by users with permissions.</p></li><li><p>Integrate tag filtering into the issue list and search features.</p></li><li><p>Store tags locally for offline use and sync changes with the backend.</p></li><li><p>Provide a tag management page or modal for bulk editing and organizing tags.</p></li><li><p>Connect with backend APIs to create, update, delete, and fetch tags.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Research tagging UX patterns in project management tools.</p></li><li><p>Design the tagging UI for issue forms and issue lists.</p></li><li><p>Develop frontend components with offline support.</p></li><li><p>Coordinate with backend team to define tag-related APIs.</p></li><li><p>Test tagging functionality and syncing behavior.</p></li><li><p>Gather user feedback and refine the feature.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Verify cross-browser compatibility.</p></li><li><p>Keep accessibility in mind for tag controls.</p></li><li><p>Consider how tags interact with other filters and sorting options.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Utilize Mobile Access',
    description:
      'Ensure users have a seamless and efficient experience accessing the issue tracking platform on mobile devices, whether through a mobile-optimized web app or native apps. This will allow users to manage issues, projects, and collaborate effectively on the go.',
    status: 'in-progress',
    priority: 'medium',
    tag: 'testing',
    createdAt: generateDateInPast(5),
    content:
      '<h1>Utilize Mobile Access</h1><p></p><h2>Goal</h2><p>Ensure users have a seamless and efficient experience accessing the issue tracking platform on mobile devices, whether through a mobile-optimized web app or native apps. This will allow users to manage issues, projects, and collaborate effectively on the go.</p><p></p><h2>Key Points</h2><ul><li><p>Mobile experience should be consistent with desktop in terms of available features and data, so users can switch between devices without losing context.</p></li><li><p>Prioritize simple, clear navigation and focused content, considering users often interact with mobile devices in hurried or distracted states.</p></li><li><p>Optimize UI elements for touch input: buttons, forms, and controls should be large enough and easy to use without errors.</p></li><li><p>Support offline access and syncing, so users can view and update issues even without a stable connection.</p></li><li><p>Leverage mobile-specific features where appropriate, such as push notifications, GPS, or camera for attachments.</p></li><li><p>Provide quick access to key actions like creating issues, updating status, and adding comments.</p></li><li><p>Ensure fast loading times and smooth performance on a variety of mobile devices and network conditions.</p></li><li><p>Make help and support easy to find within the mobile experience, with contextual guidance and tutorials if needed.</p></li><li><p>Test extensively across different mobile platforms, screen sizes, and browsers to ensure compatibility and accessibility.</p></li><li><p>Continuously gather user feedback and iterate to improve the mobile experience.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Develop a responsive web interface optimized for mobile screens or build native apps for iOS and Android.</p></li><li><p>Simplify navigation with bottom menus or hamburger menus to maximize screen space.</p></li><li><p>Implement offline caching and data sync mechanisms similar to desktop offline mode.</p></li><li><p>Use push notifications to alert users about important updates or reminders.</p></li><li><p>Design forms and interactive elements with mobile usability best practices in mind.</p></li><li><p>Provide onboarding and in-app help tailored for mobile users.</p></li><li><p>Monitor performance and usage analytics to identify pain points and opportunities.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Analyze user needs and behaviors specific to mobile usage.</p></li><li><p>Design mobile UI/UX mockups focusing on usability and feature parity.</p></li><li><p>Develop and test mobile-optimized interfaces or native apps.</p></li><li><p>Implement offline support and syncing for mobile.</p></li><li><p>Set up push notification infrastructure.</p></li><li><p>Conduct thorough testing on multiple devices and gather user feedback.</p></li><li><p>Iterate and improve based on real-world usage.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Follow accessibility standards and mobile best practices.</p></li><li><p>Coordinate with backend and security teams to ensure smooth data handling and secure authentication on mobile.</p></li><li><p>Coordinate with backend and security teams to ensure smooth data handling and secure authentication on mobile.</p></li></ul>',
  },
  {
    id: uuidv4(),
    title: 'Attach Files and Documents',
    description:
      'Allow users to attach files and documents to issues, comments, and other relevant parts of the platform to provide additional context, evidence, or resources.',
    status: 'finished',
    priority: 'high',
    tag: 'testing',
    createdAt: generateDateInPast(6),
    content:
      '<h1>Attach Files and Documents</h1><p></p><h2>Goal</h2><p>Allow users to attach files and documents to issues, comments, and other relevant parts of the platform to provide additional context, evidence, or resources.</p><p></p><h2>Key Points</h2><ul><li><p>Support a variety of file types including images, PDFs, documents, spreadsheets, and more.</p></li><li><p>Enable easy attachment via drag-and-drop, file picker, or paste functionality.</p></li><li><p>Display attached files clearly within issues or comments, with previews for common file types like images.</p></li><li><p>Ensure uploaded files are securely stored and access is controlled according to project and user permissions.</p></li><li><p>When attaching images or files in markdown content, provide proper linking and rendering so they appear inline or as clickable links.</p></li><li><p>Consider privacy implications: files in public contexts may be accessible via anonymized URLs, so sensitive files should be protected or served from secure locations.</p></li><li><p>Support offline attachment drafting and syncing when back online.</p></li><li><p>Provide clear feedback during upload (progress indicators, success/failure messages).</p></li><li><p>Allow users to remove or replace attachments as needed.</p></li></ul><p></p><h2>Implementation</h2><ul><li><p>Implement drag-and-drop and file selection UI components for attaching files.</p></li><li><p>Store files on a secure backend or cloud storage with appropriate authentication.</p></li><li><p>Generate markdown-compatible links or embeds for attached files and images.</p></li><li><p>Show thumbnails or icons representing attached files within the UI.</p></li><li><p>Sync attachments with backend APIs, supporting offline caching and retries.</p></li><li><p>Handle file size limits and provide user-friendly error messages.</p></li><li><p>Coordinate with backend to ensure files are served securely and efficiently.</p></li></ul><p></p><h2>Next Steps</h2><ul><li><p>Research best practices for file attachment UX in issue tracking and collaboration tools.</p></li><li><p>Design UI for attaching, viewing, and managing files within issues and comments.</p></li><li><p>Develop frontend components with support for drag-and-drop, paste, and file picker.</p></li><li><p>Implement backend support for secure file storage and retrieval.</p></li><li><p>Test file uploads, previews, markdown rendering, and offline syncing.</p></li><li><p>Gather user feedback and iterate on the experience.</p></li></ul><p></p><p><strong>Reminders</strong></p><ul><li><p>Be mindful of browser compatibility and file handling limitations.</p></li><li><p>Coordinate with security teams to protect sensitive data.</p></li><li><p>Review privacy considerations especially for public or shared projects.</p></li></ul>',
  },
]
